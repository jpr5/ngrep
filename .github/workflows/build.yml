name: ngrep multiplatform autobuilds

on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "*.c"
      - "*.h"
      - "config.h.in"
      - "configure"
      - "configure.ac"
      - "Makefile"
      - "Makefile.in"
      - "winXX/**"
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      deploymentName:
        description: "Name for this deployment"
        required: true
        default: "Manual Deployment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAKEFLAGS: -j3

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        name: [ ubuntu-latest-gcc, ubuntu-latest-gcc-arm64, ubuntu-latest-clang, macos-15-clang, macos-26-clang, freebsd-15-clang, freebsd-15-gcc, openbsd-7-gcc, openbsd-7-clang, netbsd-10-gcc, netbsd-10-clang, windows-latest-msvc ]
        include:
          - name: ubuntu-latest-gcc
            os: ubuntu-latest
            cc: gcc
          - name: ubuntu-latest-gcc-arm64
            os: ubuntu-latest
            cc: gcc
            arch: arm64
          - name: ubuntu-latest-clang
            os: ubuntu-latest
            cc: clang
          - name: macos-15-clang
            os: macos-15
            cc: clang
          - name: macos-26-clang
            os: macos-26
            cc: clang
          - name: freebsd-15-clang
            os: ubuntu-latest
            cc: clang
          - name: freebsd-15-gcc
            os: ubuntu-latest
            cc: gcc
          - name: openbsd-7-gcc
            os: ubuntu-latest
            cc: egcc
          - name: openbsd-7-clang
            os: ubuntu-latest
            cc: clang
          - name: netbsd-10-gcc
            os: ubuntu-latest
            cc: gcc
          - name: netbsd-10-clang
            os: ubuntu-latest
            cc: clang
          - name: windows-latest-msvc
            os: windows-latest
            cc: msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Build Linux
        if: startsWith(matrix.name,'ubuntu') && matrix.arch != 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool clang tree libpcap-dev libnet-dev libpcre2-dev
          ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }}
          make
          make install DESTDIR=/tmp
          tree /tmp/usr

      - name: Build Linux ARM64
        if: startsWith(matrix.name,'ubuntu') && matrix.arch == 'arm64'
        run: |
          docker run --rm --platform linux/arm64 -v $PWD:/work -w /work ubuntu:latest bash -c "
            apt-get update -q -y &&
            apt-get install -q -y build-essential autoconf automake libtool tree libpcap-dev libnet-dev libpcre2-dev &&
            ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }} &&
            make &&
            make install DESTDIR=/tmp &&
            tree /tmp/usr
          "

      - name: Build MacOS
        if: startsWith(matrix.name,'macos')
        run: |
          brew update
          brew install autoconf automake libtool tree libpcap libnet #pcre2
          ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }}
          make
          make install DESTDIR=/tmp
          tree /tmp/usr
          uname -a
          tar czf ngrep-${{ matrix.name }}.tar.gz /tmp/usr

      - name: Build FreeBSD
        if: startsWith(matrix.name,'freebsd')
        uses: vmactions/freebsd-vm@v1
        with:
          release: "15.0"
          usesh: true
          prepare: |
            # OS has libpcap already installed (and adding puts a second in /usr/local)
            pkg install -y autotools libtool gcc llvm doxygen tree pkgconf libnet pcre2
          run: |
            ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }}
            make
            make install DESTDIR=/tmp
            tree /tmp/usr

      - name: Build OpenBSD
        if: startsWith(matrix.name,'openbsd')
        uses: vmactions/openbsd-vm@v1
        with:
          usesh: true
          prepare: |
            export PKG_PATH=https://cdn.openbsd.org/pub/OpenBSD/$(uname -r)/packages/$(uname -m)/
            pkg_add -I autoconf%2.72 automake%1.17 gcc%11 llvm%19 doxygen tree pkgconf libnet%1.1 pcre2
          run: |
            ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }}
            make
            make install DESTDIR=/tmp
            tree /tmp/usr

      - name: Build NetBSD
        if: startsWith(matrix.name,'netbsd')
        uses: vmactions/netbsd-vm@v1
        with:
          usesh: true
          prepare: |
            export PATH=/usr/sbin:/usr/pkg/sbin:/usr/pkg/bin:$PATH
            export PKG_PATH="http://cdn.netbsd.org/pub/pkgsrc/packages/NetBSD/$(uname -p)/$(uname -r | cut -d_ -f1)/All"
            pkg_add autoconf automake libtool gcc13 clang pkgconf libpcap libnet
          run: |
            ./configure --enable-ipv6 --enable-pcre2 --enable-tcpkill --prefix=/usr CC=${{ matrix.cc }}
            make
            make install DESTDIR=/tmp
            tree /tmp/usr

      - name: Build Windows
        if: startsWith(matrix.name,'windows')
        shell: powershell
        run: |
          # Download and install Npcap SDK
          $sdkUrl = "https://npcap.com/dist/npcap-sdk-1.13.zip"
          $sdkZip = "$env:TEMP\npcap-sdk.zip"
          $sdkDir = "C:\npcap-sdk"

          Write-Host "Downloading Npcap SDK..."
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkZip

          Write-Host "Extracting Npcap SDK..."
          Expand-Archive -Path $sdkZip -DestinationPath $sdkDir -Force

          # Verify SDK installation
          if (-Not (Test-Path "$sdkDir\Include\pcap.h")) {
            Write-Error "Npcap SDK not found at $sdkDir"
            exit 1
          }
          Write-Host "Npcap SDK installed successfully"

          # Install PCRE2 via vcpkg (pre-installed on GitHub Actions)
          Write-Host "Installing PCRE2..."
          vcpkg install pcre2:x64-windows
          vcpkg integrate install

          # Build with CMake
          Write-Host "Configuring with CMake..."
          mkdir build
          cd build
          cmake ../winXX -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -DNPCAP_SDK_DIR="$sdkDir"

          Write-Host "Building..."
          cmake --build . --config Release

          # Show output
          Write-Host "Build artifacts:"
          dir bin/Release

          # Verify the executable was created
          if (-Not (Test-Path "bin/Release/ngrep.exe")) {
            Write-Error "ngrep.exe was not built"
            exit 1
          }

          Write-Host "Build successful."

#          # Test that it runs
#          # Install Npcap runtime (required to run ngrep.exe)
#          Write-Host "Downloading Npcap runtime..."
#          $npcapUrl = "https://npcap.com/dist/npcap-1.80.exe"
#          $npcapInstaller = "$env:TEMP\npcap-installer.exe"
#          rite-Host "Build successful."
#
#          Invoke-WebRequest -Uri $npcapUrl -OutFile $npcapInstaller
#
#          # Run installer with full silent flags and timeout
#          Write-Host "Installing Npcap runtime..."
#          $process = Start-Process -FilePath $npcapInstaller -ArgumentList "/loopback_support=yes /npf_startup=yes /dlt_null=no /vlan_support=yes /dot11_support=yes /admin_only=no /disable_restore_point=yes /winpcap_mode=yes /S" -PassThru -NoNewWindow
#
#          # Wait up to 2 minutes for installation
#          if (-Not $process.WaitForExit(120000)) {
#            Write-Warning "Npcap installation timed out, killing process"
#            $process.Kill()
#          }
#
#          Write-Host "Npcap runtime installation completed"
#
#          Write-Host "Testing ngrep.exe..."
#          ./bin/Release/ngrep.exe -V
#          Write-Host "Test successful."

#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ngrep-${{ matrix.name }}-${{ matrix.arch }}
#          path: ngrep-${{ matrix.name }}-${{ matrix.arch }}.tar.gz
